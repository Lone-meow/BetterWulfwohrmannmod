
@border_incident_escalation_countdown = 15
@border_conflict_incident_forgotten_timer = 30
@border_conflict_escalate_to_war_countdown = 45
@border_conflict_time_until_cancelled = 120

NSB_border_conflict_decision_category = {

	NSB_border_conflict_initiate_incident = {
		icon = border_war

		available = {
			has_tech = radio	#Gives reinforcement rate, which is fucking vital for this whole stupid ass border skirmish to properly start with divisions in battle, otherwise the 'battle' is between two empty sides which instantly auto-completes the combat like a fucking joke. This trigger check at least improves the aggressor's chance of not getting fucked in the ass by the game mechanics. Just trust me on this one... /Snus
			FROM = {
				any_owned_state = {
					is_controlled_by = FROM
					impassable = no
					NOT = {
						has_state_flag = border_incident_active
						has_state_flag = OG_recent_border_conflict_flag
						has_state_flag = OG_gunboat_diplomacy_state_flag
						#has_state_flag = OG_state_recently_claimed_flag # 90 day cooldown.
					}
					OR = {
						is_core_of = ROOT
						is_claimed_by = ROOT
					}
					any_neighbor_state = {
						is_fully_controlled_by = ROOT
						set_temp_variable = { var:attacker_state_temp = id }
						has_ROOT_at_least_1_div_in_current_state_scope = yes
						impassable = no
						hidden_trigger = {
							NOT = {
								has_state_flag = border_incident_active
								has_state_flag = OG_recent_border_conflict_flag
								#has_state_flag = OG_state_recently_claimed_flag
							}
						}
					}
					set_temp_variable = { var:defender_state_temp = id }
				}
			}
			NOT = {
				has_non_aggression_pact_with = FROM
				gives_military_access_to = FROM
				has_military_access_to = FROM
			}
			has_opinion = {
				target = FROM
				value < 10
			}
		}

		visible = {
			OR = {
				has_game_rule = {
					rule = WORLD_AT_WAR_BORDER_AGGRESSION_LEVEL
					option = WORLD_AT_WAR_BORDER_AGGRESSION_OPTION_DEFAULT
				}
				has_game_rule = {
					rule = WORLD_AT_WAR_BORDER_AGGRESSION_LEVEL
					option = WORLD_AT_WAR_BORDER_AGGRESSION_OPTION_ONLY_SKIRMISH
				}
			}
			NOT = {
				has_war_with = FROM
				is_subject_of = FROM
			}
			if ={	#No infighting between subjects of the same overlord! 
				limit = {
					is_subject = yes
				}
				overlord = {
					NOT = {has_subject = FROM}
				}
			}
			FROM = {
				exists = yes
				has_not_initiated_border_incident_with_ROOT = yes
				NOT = {
					is_subject_of = ROOT
					is_in_faction_with = ROOT
				}
			}

			OR = {
				NOT = { has_border_war_with = FROM }
				FROM = {
					any_owned_state = {
						is_controlled_by = FROM
						NOT = {
							has_state_flag = border_incident_active
							has_state_flag = OG_recent_border_conflict_flag
							#has_state_flag = OG_state_recently_claimed_flag
						}
						any_neighbor_state = {
							NOT = { has_state_flag = border_incident_active }
							is_fully_controlled_by = ROOT
						}
					}
				}
			}
		}

		target_trigger = {
			exists = yes
			any_state = {
				is_owned_and_controlled_by = FROM
				NOT = {has_state_flag = OG_recent_border_conflict_flag}
				OR = {
					is_core_of = ROOT
					is_claimed_by = ROOT
				}
			}
		}
		target_array = neighbors
        #state_target = yes
        on_map_mode = map_only
		highlight_states = {
			highlight_states_trigger = {
				NOT = {has_state_flag = OG_recent_border_conflict_flag}
				OR = {
					is_core_of = ROOT
					is_claimed_by = ROOT
				}
				OR = {
					state = FROM.defender_state_vs_@ROOT
					AND = {
						is_owned_and_controlled_by = FROM
						hidden_trigger = { NOT = { has_state_flag = border_incident_active } }
						any_neighbor_state = {
							hidden_trigger = { NOT = { has_state_flag = border_incident_active } }
							has_ROOT_at_least_1_div_in_current_state_scope = yes
							is_fully_controlled_by = ROOT
						}
					}
				}
			}
			#highlight_color_while_active = 3
			#highlight_color_before_active = 2
		}

		cost = 25
		fire_only_once = no
		days_remove = @border_incident_escalation_countdown
		days_re_enable = 180 # 60

		war_with_target_on_remove = yes

		complete_effect = {
			custom_effect_tooltip = NSB_negative_opinion
			hidden_effect = {
				FROM = {
					add_opinion_modifier = {
						target = ROOT
						modifier = border_conflict_started
					}
				}
				if = {
					limit = {
						FROM = {
							is_subject = yes
						}
					}
					FROM = {
						OVERLORD = {	# Daddy is not happy
							add_opinion_modifier = {
								target = ROOT
								modifier = border_conflict_started_overlord
							}
						}
					}
				}
				every_country = {
					limit = { has_guaranteed = FROM }
					add_opinion_modifier = { target = ROOT modifier = border_conflict_started_overlord }
				}
			}
			if = {
				limit = { has_government = democratic }
				ROOT = { add_popularity = { ideology = democratic popularity = -0.01 } }
			}												 
			hidden_effect = {
				FROM = {
					random_owned_controlled_state = {
						limit = {
							NOT = { has_state_flag = border_incident_active }
							OR = {
								is_core_of = ROOT
								is_claimed_by = ROOT
							}
							any_neighbor_state = {
								NOT = { has_state_flag = border_incident_active }
								has_ROOT_at_least_1_div_in_current_state_scope = yes
								is_fully_controlled_by = ROOT
							}
						}
						save_event_target_as = defender_state
						set_variable = { FROM.defender_state_vs_@ROOT = id }
						set_temp_variable = { defender_state_temp = id }
						set_state_flag = border_incident_active
					}
				}
				random_state = {
					limit = {
						is_fully_controlled_by = ROOT
						hidden_trigger = { NOT = { has_state_flag = border_incident_active } }
						has_ROOT_at_least_1_div_in_current_state_scope = yes
						any_neighbor_state = {
							state = var:FROM.defender_state_vs_@ROOT
						}
					}
					save_event_target_as = attacker_state
					set_variable = { FROM.attacker_state_vs_@ROOT = id }
					set_temp_variable = { attacker_state_temp = id }
					set_state_flag = border_incident_active
				}
			}
			custom_effect_tooltip = NSB_border_incident_delay_until_new_incident_180
			FROM = {
				country_event = { id = NSB_border_incident_defender_warning.1 hours = 1 }
				activate_targeted_decision = { target = ROOT decision = NSB_border_conflict_incident_warning_defender }
			}
		}
		remove_effect = {
			hidden_effect = {
				var:FROM.defender_state_vs_@ROOT = {
					save_event_target_as = defender_state 
					set_state_flag = {
						flag = OG_recent_border_conflict_flag
						days = 120
						value = 1
					}
					set_state_flag = {
						flag = OG_recent_border_conflict_AI_flag
						days = 365
						value = 1
					}
				}
				var:FROM.attacker_state_vs_@ROOT = {
					save_event_target_as = attacker_state
					set_state_flag = {
						flag = OG_recent_border_conflict_flag
						days = 120
						value = 1
					}
					set_state_flag = {
						flag = OG_recent_border_conflict_AI_flag
						days = 365
						value = 1
					}
				}
				FROM = {
					random_owned_controlled_state = {
						limit = {
							hidden_trigger = { NOT = { has_state_flag = border_incident_active } }
							any_neighbor_state = {
								is_fully_controlled_by = ROOT
								has_ROOT_at_least_1_div_in_current_state_scope = yes
								hidden_trigger = {
									NOT = { has_state_flag = border_incident_active }
								}
							}
						}
						set_temp_variable = { defender_state_temp = id }
					}
				}
				random_state = {
					limit = {
						is_fully_controlled_by = ROOT
						hidden_trigger = { NOT = { has_state_flag = border_incident_active } }
						has_ROOT_at_least_1_div_in_current_state_scope = yes
						any_neighbor_state = {
							state = var:FROM.defender_state_vs_@ROOT
						}
					}
					set_temp_variable = { attacker_state_temp = id }
				}
			}
			activate_targeted_decision = { target = FROM decision = NSB_escalate_incident_to_border_conflict }
		}
		ai_will_do = {
			factor = 0.5
			modifier = {
				strength_ratio = {
					tag = FROM
					ratio < 1
				}
				factor = 0.1
			}
			modifier = {	# Be polite.
				FROM = {
					has_border_war = yes
				}
				factor = 0
			}
			modifier = {	# Be polite.
				FROM = {
					any_owned_state = {
						has_state_flag = OG_state_recently_claimed_flag
					}
				}
				factor = 0
			}
			modifier = {	# Be polite and don't any the player. Seriously.
				FROM = {
					is_ai = no
					any_owned_state = {
						has_state_flag = OG_recent_border_conflict_AI_flag	#Guarantees at least 1 year cooldown between each border conflict.
					}
				}
				factor = 0
			}
		}
	}

	#Mission for defender warning that a conflict with FROM is coming
	NSB_border_conflict_incident_warning_defender = {
		icon = border_war

		allowed = { always = no } #Activated from effect

		available = {
			hidden_trigger = { always = no }
		}

        on_map_mode = map_only
		highlight_states = {
			highlight_state_targets = {
				state = var:defender_state_temp
				state = var:ROOT.defender_state_vs_@FROM
			}
		}

		war_with_target_on_timeout = yes

		ai_will_do = {
			base = 0
			modifier = {}
		}

		days_mission_timeout = @border_incident_escalation_countdown
		fire_only_once = yes
		is_good = no
		
		timeout_effect = {
			custom_effect_tooltip = escalation_possible_tooltip_for_defender
			custom_effect_tooltip = effects_if_border_conflict_is_lost
			effect_tooltip = {
#				add_threat = 1
				add_political_power = -100
				var:ROOT.defender_state_vs_@FROM = { FROM = { transfer_state = PREV } }
			}
			hidden_effect = {
				remove_targeted_decision = { target = FROM decision = NSB_border_conflict_incident_warning_defender }
				activate_targeted_decision = { target = FROM decision = NSB_border_conflict_escalation_warning_defender }
			}
		}
	}

	#Mission for defender warning FROM can escalate to war at any point is coming
	NSB_border_conflict_escalation_warning_defender = {
		icon = border_war

		allowed = { always = no } #Activated from effect

		available = {
			hidden_trigger = { always = no }
		}

        on_map_mode = map_only
		highlight_states = {
			highlight_state_targets = {
				state = var:defender_state_temp
				state = var:ROOT.defender_state_vs_@FROM
			}
		}

		war_with_target_on_timeout = yes

		ai_will_do = {
			base = 0
			modifier = {}
		}

		days_mission_timeout = @border_conflict_incident_forgotten_timer
		fire_only_once = yes
		is_good = no

		timeout_effect = {
			custom_effect_tooltip = from_cannot_escalate
			custom_effect_tooltip = effects_if_border_conflict_is_lost
			effect_tooltip = {
#				add_threat = -1
				add_political_power = -100
				var:ROOT.defender_state_vs_@FROM = { FROM = { transfer_state = PREV } }
			}
		}		
	}

	#Mission for attacker to escalate or incident is forgotten
	#Decision to escalate incident on border with FROM to border conflict
	NSB_escalate_incident_to_border_conflict = {
		icon = border_war

		allowed = { always = no } #Activated from effect

		available = {
			#var:FROM.attacker_state_vs_@ROOT = {
			#	is_fully_controlled_by = ROOT
			#}
			divisions_in_border_state = {
				state = var:FROM.attacker_state_vs_@ROOT
				border_state = var:FROM.defender_state_vs_@ROOT
				size > 0
			}
		}

        on_map_mode = map_only
		highlight_states = {
 			highlight_state_targets = {
				state = var:FROM.attacker_state_vs_@ROOT			
			} 
		}

		ai_will_do = {
			base = 200
			modifier = {}
		}

		cancel_trigger = {
			is_in_faction_with = FROM
		}

		selectable_mission = yes
		fire_only_once = yes #Reactivation handled in effect
		days_mission_timeout = @border_conflict_incident_forgotten_timer

		timeout_effect = {
			custom_effect_tooltip = NSB_border_incident_delay_until_new_incident_120
			hidden_effect = {
				FROM = { remove_targeted_decision = { target = ROOT decision = NSB_border_conflict_escalation_warning_defender } }
				FROM = {
					var:attacker_state_vs_@ROOT = {
						clr_state_flag = border_incident_active
					}
					var:defender_state_vs_@ROOT = {
						clr_state_flag = border_incident_active
					}
					clear_variable = attacker_state_vs_@ROOT
					clear_variable = defender_state_vs_@ROOT
				}
			}
		}

		complete_effect = {
			start_border_war = {
				change_state_after_war = no
				attacker = {
					state = var:FROM.attacker_state_vs_@ROOT
					num_provinces = 4
					on_win = NSB_border_conflict_won_attacker.1
					on_lose = NSB_border_conflict_lost_attacker.1
					on_cancel = NSB_border_conflict_canceled_attacker.1
					modifier = -0.85
				}
				
				defender = {
					state = var:FROM.defender_state_vs_@ROOT
					num_provinces = 4
					on_win = NSB_border_conflict_won_defender.1
					on_lose = NSB_border_conflict_lost_defender.1
					on_cancel = NSB_border_conflict_canceled_defender.1
					modifier = -0.85
				}
			}
			activate_targeted_decision = { target = FROM decision = NSB_border_conflict_escalate_conflict }
			activate_targeted_decision = { target = FROM decision = NSB_border_conflict_time_until_cancelled }
			activate_targeted_decision = { target = FROM decision = NSB_border_conflict_back_out_of_conflict }		#Not in Vanilla, strangely
			FROM = {
				activate_targeted_decision = { target = ROOT decision = NSB_border_conflict_escalate_conflict }
				activate_targeted_decision = { target = ROOT decision = NSB_border_conflict_time_until_cancelled }
				activate_targeted_decision = { target = ROOT decision = NSB_border_conflict_back_out_of_conflict }	#Not in Vanilla, strangely
			}
		}
	}

	#Mission for attacker to win border war against FROM in X days
	NSB_border_conflict_time_until_cancelled = {
		icon = border_war

		allowed = { always = no } #Activated from effect

		available = {
			var:FROM.defender_state_vs_@ROOT = { has_border_war = no }
			var:FROM.attacker_state_vs_@ROOT = { has_border_war = no }
		}

        on_map_mode = map_only
		highlight_states = {
			highlight_state_targets = {
				state = var:defender_state_temp
				state = var:FROM.defender_state_vs_@ROOT
			} 
		}

		ai_will_do = {
			base = 0
			modifier = {}
		}

		days_mission_timeout = @border_conflict_time_until_cancelled
		is_good = no

		fire_only_once = yes #Reactivation handled in effect

		complete_effect = {

		}

		timeout_effect = {
			if = {
				limit = { is_border_conflict_defender_vs_FROM = yes }
				cancel_border_war = {
					defender = var:defender_state_vs_@FROM
					attacker = var:attacker_state_vs_@FROM
				}
			}
			else = {
				cancel_border_war = {
					defender = var:FROM.defender_state_vs_@ROOT
					attacker = var:FROM.attacker_state_vs_@ROOT
				}
			}
			hidden_effect = {
				remove_targeted_decision = { target = FROM decision = NSB_border_conflict_escalate_conflict }
				remove_targeted_decision = { target = FROM decision = NSB_border_conflict_escalate_to_war }	#Not in vanilla. If not present, you're able to immediately escalate to war when entering a new border skirmish in the same region.
			}
		}
	}

	#Decision to escalate conflict further
	NSB_border_conflict_escalate_conflict = {
		icon = GFX_decision_generic_ignite_civil_war

		allowed = { always = no } #Activated from effect

		visible = {
			has_border_war_with = FROM
		}

        on_map_mode = map_only
		highlight_states = {
			highlight_state_targets = {
				state = var:FROM.attacker_state_vs_@ROOT
				state = var:ROOT.defender_state_vs_@FROM
			}
		}

		cost = 25

		ai_will_do = {
			base = 0
			modifier = {}
		}

		fire_only_once = yes #Reactivation handled in effect

		complete_effect = {
			if = {
				limit = { is_border_conflict_defender_vs_FROM = yes }
				set_border_war_data = {
					attacker = var:attacker_state_vs_@FROM
					defender = var:defender_state_vs_@FROM
					defender_modifier = -0.45					#Initiator gets slightly bigger boost.
					attacker_modifier = -0.50					#Note: Boost goes from -0.85 to -0.50
					combat_width = 100
				}
			}
			else = {
				set_border_war_data = {
					attacker = var:FROM.attacker_state_vs_@ROOT
					defender = var:FROM.defender_state_vs_@ROOT
					attacker_modifier = -0.45
					defender_modifier = -0.50
					combat_width = 100
				}
			}

			FROM = {
				set_country_flag = {
					flag = NSB_border_conflict_escalate_to_war_cooldown_@ROOT
					days = @border_conflict_escalate_to_war_countdown
					value = 1
				}
				remove_targeted_decision = { target = ROOT decision = NSB_border_conflict_escalate_conflict }
			}
			set_country_flag = {
				flag = NSB_border_conflict_escalate_to_war_cooldown_@FROM
				days = @border_conflict_escalate_to_war_countdown
				value = 1
			}
			set_country_flag = {
				flag = OG_border_conflict_escalate_to_war_fix_flag@FROM		#Not in vanilla. If not present, you're able to immediately escalate to war when entering a new border skirmish in the same region.
				days = 180
				value = 1
			}
			custom_effect_tooltip = in_45_days
			activate_targeted_decision = { target = FROM decision = NSB_border_conflict_escalate_to_war }
		}
	}

	#Decision to escalate conflict further
	NSB_border_conflict_escalate_to_war = {
		icon = GFX_decision_hol_draw_up_staff_plans

		allowed = { always = no } #Activated from effect

		visible = {
			NOT = { has_country_flag = NSB_border_conflict_escalate_to_war_cooldown_@FROM }
			has_country_flag = OG_border_conflict_escalate_to_war_fix_flag@FROM
			has_border_war_with = FROM
		}

        on_map_mode = map_only
		highlight_states = {
			highlight_state_targets = {
				state = var:FROM.defender_state_vs_@ROOT
				state = var:ROOT.attacker_state_vs_@FROM
			}
		}

		cost = 50

		ai_will_do = {
			base = 0 #30
			modifier = {}
		}

		days_remove = 15
		fire_only_once = yes #Reactivation handled in effect
		war_with_target_on_remove = yes
		cancel_if_not_visible = yes				#Not in vanilla. If not present, war will be declared even if the border conflict ends before this timer runs out, which is stupid.
		complete_effect = {
			if = {
				limit = { is_border_conflict_defender_vs_FROM = yes }
				var:ROOT.defender_state_vs_@FROM = { save_event_target_as = their_state }
				var:ROOT.attacker_state_vs_@FROM = { save_event_target_as = our_state }
			}
			else = {
				var:FROM.defender_state_vs_@ROOT = { save_event_target_as = our_state }
				var:FROM.attacker_state_vs_@ROOT = { save_event_target_as = their_state }
			}
			FROM = {
				country_event = { id = NSB_border_conflict_escalate_to_war.1 }
				hidden_effect = {
					remove_targeted_decision = { target = ROOT decision = NSB_border_conflict_escalate_to_war }
				}
		 	}
		}

		remove_effect = {
			hidden_effect = {
				remove_targeted_decision = { target = FROM decision = NSB_border_conflict_back_out_of_conflict }
				FROM = {
					remove_targeted_decision = { target = ROOT decision = NSB_border_conflict_back_out_of_conflict }
				}
			}
			cancel_border_war = {
				dont_fire_events = yes
				defender = var:FROM.defender_state_vs_@ROOT
				attacker = var:FROM.attacker_state_vs_@ROOT
			}
			declare_war_on = { target = FROM type = take_claimed_state }
			if = {
				limit = { is_border_conflict_defender_vs_FROM = yes }
				var:attacker_state_vs_@FROM = {
					clr_state_flag = border_incident_active
				}
				var:defender_state_vs_@FROM = {
					clr_state_flag = border_incident_active
				}
				clear_variable = attacker_state_vs_@FROM
				clear_variable = defender_state_vs_@FROM
			}
			else = {
				FROM = {
					var:attacker_state_vs_@ROOT = {
						clr_state_flag = border_incident_active
					}
					var:defender_state_vs_@ROOT = {
						clr_state_flag = border_incident_active
					}
					clear_variable = attacker_state_vs_@ROOT
					clear_variable = defender_state_vs_@ROOT
				}
			}
		}
	}

	#Decision to back down from conflict
	NSB_border_conflict_back_out_of_conflict = {
		icon = GFX_decision_infiltrate_state

		allowed = { always = no } #Activated from effect

		visible = {
			has_border_war_with = FROM
		}

        on_map_mode = map_only
		highlight_states = {
			highlight_state_targets = {
				state = var:FROM.attacker_state_vs_@ROOT
				state = var:ROOT.defender_state_vs_@FROM
			}
		}

		ai_will_do = {
			base = 0
			modifier = {}
		}

		fire_only_once = yes #Reactivation handled in effect

		complete_effect = {
			if = {
				limit = { is_border_conflict_defender_vs_FROM = yes }
				finalize_border_war = {
					attacker_win = yes
					defender = var:defender_state_vs_@FROM
					attacker = var:attacker_state_vs_@FROM
				}
			}
			else = {
				finalize_border_war = {
					defender = var:FROM.defender_state_vs_@ROOT
					attacker = var:FROM.attacker_state_vs_@ROOT
					defender_win = yes
				}
			}
		}
	}
}

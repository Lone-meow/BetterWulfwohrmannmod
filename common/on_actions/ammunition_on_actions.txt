on_actions = {

	on_startup = {
		effect = {
			every_possible_country = {
				#limit = {
				#	is_modded_country_trigger = yes
				#}

				set_variable = { economy_level_ammo_production_variable = 0.70 } #Civilian Economy



				### GAME RULES ###
				if = {
					limit = {
						has_game_rule = {
							rule = WORLD_AT_WAR_AMMUNITION_PRODUCTION_LEVEL
							option = WORLD_AT_WAR_AMMUNITION_PRODUCTION_LEVEL_DEFAULT
						}
					}
					set_variable = { game_rule_ammunition_production_variable = 1.0 }
				}
				else_if = {
					limit = {
						has_game_rule = {
							rule = WORLD_AT_WAR_AMMUNITION_PRODUCTION_LEVEL
							option = WORLD_AT_WAR_AMMUNITION_PRODUCTION_LEVEL_PLUS_1
						}
					}
					set_variable = { game_rule_ammunition_production_variable = 1.1 }
				}
				else_if = {
					limit = {
						has_game_rule = {
							rule = WORLD_AT_WAR_AMMUNITION_PRODUCTION_LEVEL
							option = WORLD_AT_WAR_AMMUNITION_PRODUCTION_LEVEL_PLUS_2
						}
					}
					set_variable = { game_rule_ammunition_production_variable = 1.2 }
				}
				else_if = {
					limit = {
						has_game_rule = {
							rule = WORLD_AT_WAR_AMMUNITION_PRODUCTION_LEVEL
							option = WORLD_AT_WAR_AMMUNITION_PRODUCTION_LEVEL_PLUS_3
						}
					}
					set_variable = { game_rule_ammunition_production_variable = 1.3 }
				}
				else_if = {
					limit = {
						has_game_rule = {
							rule = WORLD_AT_WAR_AMMUNITION_PRODUCTION_LEVEL
							option = WORLD_AT_WAR_AMMUNITION_PRODUCTION_LEVEL_PLUS_4
						}
					}
					set_variable = { game_rule_ammunition_production_variable = 1.4 }
				}
				else_if = {
					limit = {
						has_game_rule = {
							rule = WORLD_AT_WAR_AMMUNITION_PRODUCTION_LEVEL
							option = WORLD_AT_WAR_AMMUNITION_PRODUCTION_LEVEL_PLUS_5
						}
					}
					set_variable = { game_rule_ammunition_production_variable = 1.5 }
				}
				else_if = {
					limit = {
						has_game_rule = {
							rule = WORLD_AT_WAR_AMMUNITION_PRODUCTION_LEVEL
							option = WORLD_AT_WAR_AMMUNITION_PRODUCTION_LEVEL_MINUS_1
						}
					}
					set_variable = { game_rule_ammunition_production_variable = 0.9 }
				}
				else_if = {
					limit = {
						has_game_rule = {
							rule = WORLD_AT_WAR_AMMUNITION_PRODUCTION_LEVEL
							option = WORLD_AT_WAR_AMMUNITION_PRODUCTION_LEVEL_MINUS_2
						}
					}
					set_variable = { game_rule_ammunition_production_variable = 0.8 }
				}
				else_if = {
					limit = {
						has_game_rule = {
							rule = WORLD_AT_WAR_AMMUNITION_PRODUCTION_LEVEL
							option = WORLD_AT_WAR_AMMUNITION_PRODUCTION_LEVEL_MINUS_3
						}
					}
					set_variable = { game_rule_ammunition_production_variable = 0.7 }
				}
				else_if = {
					limit = {
						has_game_rule = {
							rule = WORLD_AT_WAR_AMMUNITION_PRODUCTION_LEVEL
							option = WORLD_AT_WAR_AMMUNITION_PRODUCTION_LEVEL_MINUS_4
						}
					}
					set_variable = { game_rule_ammunition_production_variable = 0.6 }
				}
				else_if = {
					limit = {
						has_game_rule = {
							rule = WORLD_AT_WAR_AMMUNITION_PRODUCTION_LEVEL
							option = WORLD_AT_WAR_AMMUNITION_PRODUCTION_LEVEL_MINUS_5
						}
					}
					set_variable = { game_rule_ammunition_production_variable = 0.5 }
				}



			}
		}
	}

	on_daily = {
		effect = {

			### Daily Consumption ###

			set_variable = { ammunition_consumption = 0 }

			### Infantry ###

			set_variable = { infantry_consumption = num_battalions_with_type@infantry }
			multiply_variable = { infantry_consumption = 0.01 }

			### Artillery ###

			set_variable = { artillery_consumption = num_battalions_with_type@artillery }
			multiply_variable = { artillery_consumption = 0.04 }	#Vanilla 0.1
			set_variable = { artillery_brigade_consumption = num_battalions_with_type@artillery_brigade }
			multiply_variable = { artillery_brigade_consumption = 0.05 }
			set_variable = { mot_artillery_brigade_consumption = num_battalions_with_type@mot_artillery_brigade }
			multiply_variable = { mot_artillery_brigade_consumption = 0.05 }
			set_variable = { rocket_artillery_consumption = num_battalions_with_type@rocket_artillery }
			multiply_variable = { rocket_artillery_consumption = 0.06 }
			set_variable = { rocket_artillery_brigade_consumption = num_battalions_with_type@rocket_artillery_brigade }
			multiply_variable = { rocket_artillery_brigade_consumption = 0.07 }
			set_variable = { mot_rocket_artillery_brigade_consumption = num_battalions_with_type@mot_rocket_artillery_brigade }
			multiply_variable = { mot_rocket_artillery_brigade_consumption = 0.07 }

			set_variable = { motorized_rocket_brigade_consumption = num_battalions_with_type@rocket_artillery_brigade }
			multiply_variable = { motorized_rocket_brigade_consumption = 0.07 }

			### Vehicles ###

			set_variable = { mechanized_consumption = num_battalions_with_type@mechanized }
			multiply_variable = { mechanized_consumption = 0.02 }
			set_variable = { amphibious_mechanized_consumption = num_battalions_with_type@amphibious_mechanized }
			multiply_variable = { amphibious_mechanized_consumption = 0.02 }
			set_variable = { armored_car_consumption = num_battalions_with_type@armored_car }
			multiply_variable = { armored_car_consumption = 0.015 }

			### Tanks ###

			set_variable = { light_armor_consumption = num_battalions_with_type@light_armor }
			multiply_variable = { light_armor_consumption = 0.06 }	#Vanilla 0.04
			set_variable = { medium_armor_consumption = num_battalions_with_type@medium_armor }
			multiply_variable = { medium_armor_consumption = 0.08 }	#Vanilla 0.06
			set_variable = { heavy_armor_consumption = num_battalions_with_type@heavy_armor }
			multiply_variable = { heavy_armor_consumption = 0.10 }	#Vanilla 0.08
			set_variable = { super_heavy_armor_consumption = num_battalions_with_type@super_heavy_armor }
			multiply_variable = { super_heavy_armor_consumption = 0.14 }
			set_variable = { modern_armor_consumption = num_battalions_with_type@modern_armor }
			multiply_variable = { modern_armor_consumption = 0.11 }

			set_variable = { amphibious_light_armor_consumption = num_battalions_with_type@amphibious_light_armor }
			multiply_variable = { amphibious_light_armor_consumption = 0.045 }
			set_variable = { amphibious_medium_armor_consumption = num_battalions_with_type@amphibious_medium_armor }
			multiply_variable = { amphibious_medium_armor_consumption = 0.06 }
			set_variable = { amphibious_heavy_armor_consumption = num_battalions_with_type@amphibious_heavy_armor }
			multiply_variable = { amphibious_heavy_armor_consumption = 0.08 }

			set_variable = { light_flame_tank_consumption = num_battalions_with_type@light_flame_tank }
			multiply_variable = { light_flame_tank_consumption = 0.05 }
			set_variable = { medium_flame_tank_consumption = num_battalions_with_type@medium_flame_tank }
			multiply_variable = { medium_flame_tank_consumption = 0.06 }
			set_variable = { heavy_flame_tank_consumption = num_battalions_with_type@heavy_flame_tank }
			multiply_variable = { heavy_flame_tank_consumption = 0.07 }

			### Self-Propelled Artillery ###

			set_variable = { light_sp_artillery_brigade_consumption = num_battalions_with_type@light_sp_artillery_brigade }
			multiply_variable = { light_sp_artillery_brigade_consumption = 0.05 }
			set_variable = { medium_sp_artillery_brigade_consumption = num_battalions_with_type@medium_sp_artillery_brigade }
			multiply_variable = { medium_sp_artillery_brigade_consumption = 0.06 }
			set_variable = { heavy_sp_artillery_brigade_consumption = num_battalions_with_type@heavy_sp_artillery_brigade }
			multiply_variable = { heavy_sp_artillery_brigade_consumption = 0.07 }
			set_variable = { super_heavy_sp_artillery_brigade_consumption = num_battalions_with_type@super_heavy_sp_artillery_brigade }
			multiply_variable = { super_heavy_sp_artillery_brigade_consumption = 0.08 }
			set_variable = { modern_sp_artillery_brigade_consumption = num_battalions_with_type@modern_sp_artillery_brigade }
			multiply_variable = { modern_sp_artillery_brigade_consumption = 0.07 }

			### Tank Destroyers ###

			set_variable = { light_tank_destroyer_brigade_consumption = num_battalions_with_type@light_tank_destroyer_brigade }
			multiply_variable = { light_tank_destroyer_brigade_consumption = 0.05 }
			set_variable = { medium_tank_destroyer_brigade_consumption = num_battalions_with_type@medium_tank_destroyer_brigade }
			multiply_variable = { medium_tank_destroyer_brigade_consumption = 0.06 }
			set_variable = { heavy_tank_destroyer_brigade_consumption = num_battalions_with_type@heavy_tank_destroyer_brigade }
			multiply_variable = { heavy_tank_destroyer_brigade_consumption = 0.08 }
			set_variable = { super_heavy_tank_destroyer_brigade_consumption = num_battalions_with_type@super_heavy_tank_destroyer_brigade }
			multiply_variable = { super_heavy_tank_destroyer_brigade_consumption = 0.13 }
			set_variable = { modern_tank_destroyer_brigade_consumption = num_battalions_with_type@modern_tank_destroyer_brigade }
			multiply_variable = { modern_tank_destroyer_brigade_consumption = 0.10 }

			### Self-Propelled Anti-Air ###

			set_variable = { light_sp_anti_air_brigade_consumption = num_battalions_with_type@light_sp_anti_air_brigade }
			multiply_variable = { light_sp_anti_air_brigade_consumption = 0.03 }
			set_variable = { medium_sp_anti_air_brigade_consumption = num_battalions_with_type@medium_sp_anti_air_brigade }
			multiply_variable = { medium_sp_anti_air_brigade_consumption = 0.04 }
			set_variable = { heavy_sp_anti_air_brigade_consumption = num_battalions_with_type@heavy_sp_anti_air_brigade }
			multiply_variable = { heavy_sp_anti_air_brigade_consumption = 0.05 }
			set_variable = { super_heavy_sp_anti_air_brigade_consumption = num_battalions_with_type@super_heavy_sp_anti_air_brigade }
			multiply_variable = { super_heavy_sp_anti_air_brigade_consumption = 0.06 }
			set_variable = { modern_sp_anti_air_brigade_consumption = num_battalions_with_type@modern_sp_anti_air_brigade }
			multiply_variable = { modern_sp_anti_air_brigade_consumption = 0.05 }

#############
#############
#############

			set_variable = { remaining_consumption = num_battalions }

			# Infantry #

			subtract_from_variable = { remaining_consumption = num_battalions_with_type@infantry }

			# Artillery #

			subtract_from_variable = { remaining_consumption = num_battalions_with_type@artillery }
			subtract_from_variable = { remaining_consumption = num_battalions_with_type@artillery_brigade }
			subtract_from_variable = { remaining_consumption = num_battalions_with_type@mot_artillery_brigade }

			subtract_from_variable = { remaining_consumption = num_battalions_with_type@rocket_artillery }
			subtract_from_variable = { remaining_consumption = num_battalions_with_type@rocket_artillery_brigade }
			subtract_from_variable = { remaining_consumption = num_battalions_with_type@mot_rocket_artillery_brigade }

			subtract_from_variable = { remaining_consumption = num_battalions_with_type@motorized_rocket_brigade }

			# Vehicles #

			subtract_from_variable = { remaining_consumption = num_battalions_with_type@mechanized }
			subtract_from_variable = { remaining_consumption = num_battalions_with_type@amphibious_mechanized }
			subtract_from_variable = { remaining_consumption = num_battalions_with_type@armored_car }

			# Tanks #

			subtract_from_variable = { remaining_consumption = num_battalions_with_type@light_armor }
			subtract_from_variable = { remaining_consumption = num_battalions_with_type@medium_armor }
			subtract_from_variable = { remaining_consumption = num_battalions_with_type@heavy_armor }
			subtract_from_variable = { remaining_consumption = num_battalions_with_type@super_heavy_armor }
			subtract_from_variable = { remaining_consumption = num_battalions_with_type@modern_armor }

			subtract_from_variable = { remaining_consumption = num_battalions_with_type@amphibious_light_armor }
			subtract_from_variable = { remaining_consumption = num_battalions_with_type@amphibious_light_armor }
			subtract_from_variable = { remaining_consumption = num_battalions_with_type@amphibious_heavy_armor }

			subtract_from_variable = { remaining_consumption = num_battalions_with_type@light_flame_tank }
			subtract_from_variable = { remaining_consumption = num_battalions_with_type@medium_flame_tank }
			subtract_from_variable = { remaining_consumption = num_battalions_with_type@heavy_flame_tank }

			# SPA #

			subtract_from_variable = { remaining_consumption = num_battalions_with_type@light_sp_artillery_brigade }
			subtract_from_variable = { remaining_consumption = num_battalions_with_type@medium_sp_artillery_brigade }
			subtract_from_variable = { remaining_consumption = num_battalions_with_type@heavy_sp_artillery_brigade }
			subtract_from_variable = { remaining_consumption = num_battalions_with_type@super_heavy_sp_artillery_brigade }
			subtract_from_variable = { remaining_consumption = num_battalions_with_type@modern_sp_artillery_brigade }

			# TD #

			subtract_from_variable = { remaining_consumption = num_battalions_with_type@light_tank_destroyer_brigade }
			subtract_from_variable = { remaining_consumption = num_battalions_with_type@medium_tank_destroyer_brigade }
			subtract_from_variable = { remaining_consumption = num_battalions_with_type@heavy_tank_destroyer_brigade }
			subtract_from_variable = { remaining_consumption = num_battalions_with_type@super_heavy_tank_destroyer_brigade }
			subtract_from_variable = { remaining_consumption = num_battalions_with_type@modern_tank_destroyer_brigade }

			# SPAA #

			subtract_from_variable = { remaining_consumption = num_battalions_with_type@light_sp_anti_air_brigade }
			subtract_from_variable = { remaining_consumption = num_battalions_with_type@medium_sp_anti_air_brigade }
			subtract_from_variable = { remaining_consumption = num_battalions_with_type@heavy_sp_anti_air_brigade }
			subtract_from_variable = { remaining_consumption = num_battalions_with_type@super_heavy_sp_anti_air_brigade }
			subtract_from_variable = { remaining_consumption = num_battalions_with_type@modern_sp_anti_air_brigade }

#############
#############
#############

			multiply_variable = { remaining_consumption = 0.02 }
			set_variable = { potential_consumption = 0 }
			
			# Infantry #

			add_to_variable = { potential_consumption = infantry_consumption }

			# Artillery #

			add_to_variable = { potential_consumption = artillery_consumption }
			add_to_variable = { potential_consumption = artillery_brigade_consumption }
			add_to_variable = { potential_consumption = mot_artillery_brigade_consumption }

			add_to_variable = { potential_consumption = rocket_artillery_consumption }
			add_to_variable = { potential_consumption = rocket_artillery_brigade_consumption }
			add_to_variable = { potential_consumption = mot_rocket_artillery_brigade_consumption }

			add_to_variable = { potential_consumption = motorized_rocket_brigade_consumption }

			# Vehicles #

			add_to_variable = { potential_consumption = mechanized_consumption }
			add_to_variable = { potential_consumption = amphibious_mechanized_consumption }
			add_to_variable = { potential_consumption = armored_car_consumption }

			# Tanks #

			add_to_variable = { potential_consumption = light_armor_consumption }
			add_to_variable = { potential_consumption = medium_armor_consumption }
			add_to_variable = { potential_consumption = heavy_armor_consumption }
			add_to_variable = { potential_consumption = super_heavy_armor_consumption }
			add_to_variable = { potential_consumption = modern_armor_consumption }

			add_to_variable = { potential_consumption = amphibious_light_armor_consumption }
			add_to_variable = { potential_consumption = amphibious_medium_armor_consumption }
			add_to_variable = { potential_consumption = amphibious_heavy_armor_consumption }

			add_to_variable = { potential_consumption = light_flame_tank_consumption }
			add_to_variable = { potential_consumption = medium_flame_tank_consumption }
			add_to_variable = { potential_consumption = heavy_flame_tank_consumption }

			# SPA #

			add_to_variable = { potential_consumption = light_armor_consumption }
			add_to_variable = { potential_consumption = medium_armor_consumption }
			add_to_variable = { potential_consumption = heavy_armor_consumption }
			add_to_variable = { potential_consumption = super_heavy_armor_consumption }
			add_to_variable = { potential_consumption = modern_armor_consumption }

			# TD #

			add_to_variable = { potential_consumption = light_tank_destroyer_brigade_consumption }
			add_to_variable = { potential_consumption = medium_tank_destroyer_brigade_consumption }
			add_to_variable = { potential_consumption = heavy_tank_destroyer_brigade_consumption }
			add_to_variable = { potential_consumption = super_heavy_tank_destroyer_brigade_consumption }
			add_to_variable = { potential_consumption = modern_tank_destroyer_brigade_consumption }

			# SPAA #

			add_to_variable = { potential_consumption = light_sp_anti_air_brigade_consumption }
			add_to_variable = { potential_consumption = medium_sp_anti_air_brigade_consumption }
			add_to_variable = { potential_consumption = heavy_sp_anti_air_brigade_consumption }
			add_to_variable = { potential_consumption = super_heavy_sp_anti_air_brigade_consumption }
			add_to_variable = { potential_consumption = modern_sp_anti_air_brigade_consumption }

#############
#############
#############

			add_to_variable = { potential_consumption = remaining_consumption }
			set_variable = { potential_consumption_max = potential_consumption }
			multiply_variable = { potential_consumption_max = 1.5 }
			divide_variable = { potential_consumption = num_divisions }

			set_variable = { commanded_divisions = 0 }
			set_variable = { divisions_in_offensive_combat = 0 }
			set_variable = { divisions_in_defensive_combat = 0 }

			every_army_leader = {	#NOTE: The leaderless consumption is actually due to a game limitation. See next note. /Snus
				limit = {
					is_leading_army_group = no
				}
				add_to_variable = { ROOT.commanded_divisions = num_units }
				add_to_variable = { ROOT.divisions_in_offensive_combat = num_units_offensive_combats }	#<--NOTE: These need to be scoped to a leader. Leaderless divisions actually don't consume any ammo when fighting... /Snus
				add_to_variable = { ROOT.divisions_in_defensive_combat = num_units_defensive_combats }
			}

			### leaderless consumption - AI can't handle this well at all...
			set_variable = { divisions_without_leadership = num_divisions }
			subtract_from_variable = { divisions_without_leadership = commanded_divisions }
			multiply_variable = { divisions_without_leadership = potential_consumption }
			multiply_variable = { divisions_without_leadership = 1 }

			#### offensive units consumption
			multiply_variable = { divisions_in_offensive_combat = potential_consumption }
			multiply_variable = { divisions_in_offensive_combat = 1.5 }

			#### defensive units consumption
			multiply_variable = { divisions_in_defensive_combat = potential_consumption }
			multiply_variable = { divisions_in_defensive_combat = 0.75 }

			set_variable = { daily_ammo_need = divisions_without_leadership }
			add_to_variable = { daily_ammo_need = divisions_in_offensive_combat }
			add_to_variable = { daily_ammo_need = divisions_in_defensive_combat }

			### AMMUNITION RATIONING DECISION ###
			if = {
				limit = {
					has_country_flag = OG_ammunition_rationing_flag
				}
				multiply_variable = { daily_ammo_need = 0.80 }
			}

			clamp_variable = { 
				var = daily_ammo_need 
				min = 0
			}
			subtract_from_variable = { ammunition_variable = daily_ammo_need }


			################## end daily consumption

			set_variable = { total_factories_available_for_ammo_production_variable = ROOT.num_of_military_factories }	#Used in tooltip
			multiply_variable = {
				var = total_factories_available_for_ammo_production_variable
				value = 100
			}
			set_variable = { extra_factories_available_for_ammo_production_variable = ROOT.num_of_available_military_factories }
			multiply_variable = {
				var = extra_factories_available_for_ammo_production_variable
				value = 200
			}


			### Daily Addition ###

			set_variable = { ammunition_daily = 0 }

			# base gain
			set_variable = { modifier_gain = modifier@daily_ammunition_gain }
			
			multiply_variable = { modifier_gain = economy_level_ammo_production_variable } #MODDED, gained from economy level.
			
			add_to_variable = { modifier_gain = extra_factories_available_for_ammo_production_variable }	#MODDED
			divide_variable = { modifier_gain = 1000 }


			### TECHNOLOGIES ###
			if = {
				limit = {
					has_tech = ammunition_production_tech_3
				}
				multiply_variable = { modifier_gain = 1.3 }
			}
			else_if = {
				limit = {
					has_tech = ammunition_production_tech_2
				}
				multiply_variable = { modifier_gain = 1.2 }
			}
			else_if = {
				limit = {
					has_tech = ammunition_production_tech_1
				}
				multiply_variable = { modifier_gain = 1.1 }
			}


			multiply_variable = { modifier_gain = game_rule_ammunition_production_variable }

			add_to_variable = { ammunition_daily = modifier_gain }

			# factor
			set_variable = { ammunition_factor_calc = 1 }
			add_to_variable = { ammunition_factor_calc = modifier@ammunition_factor }
			clamp_variable = { 
				var = ammunition_factor_calc 
				min = 0 
				#max = 0
			}

			multiply_variable = { ammunition_daily = ammunition_factor_calc }


			add_to_variable = { ammunition_variable = ammunition_daily }

			################## end daily addition



			set_variable = { ammunition_balance = ammunition_daily }
			subtract_from_variable = { ammunition_balance = daily_ammo_need }
			set_variable = { ammunition_balance_int = ammunition_balance }
			if = {
				limit = {
					check_variable = { ammunition_balance < 0 }
				}
				multiply_variable = { ammunition_balance_int = -1 }
			}



			set_variable = { ammunition_max = 0 }
			add_to_variable = { ammunition_max = owned_controlled_states }
			multiply_variable = { ammunition_max = 10 }
			set_variable = { ammunition_storage_from_states = ammunition_max }					#For tooltip
			set_variable = { ammunition_storage_from_factories = num_of_military_factories }	#For tooltip. NOTE: Total Ammunition Capacity number is slightly incorrect depending on if all your states are cored and you've got access to those military factories.
			multiply_variable = { ammunition_storage_from_factories = 10 }
			set_variable = { ammunition_storage = modifier@ammunition_capacity_k }
			add_to_variable = { ammunition_max = ammunition_storage }

			clamp_variable = {
				var = ammunition_variable 
				min = 0 
				max = ammunition_max
			}




			set_variable = { ammunition_penalty = daily_ammo_need }
			subtract_from_variable = { ammunition_penalty = ammunition_daily }
			divide_variable = { ammunition_penalty = daily_ammo_need }
			multiply_variable = { ammunition_penalty = -1 }
			if = {
				limit = {
					check_variable = { ammunition_balance < 0 }
					check_variable = { ammunition_variable < ammunition_balance_int }
					NOT = {
						has_dynamic_modifier = { modifier = ammunition_effects }
					}
				}
				add_dynamic_modifier = { modifier = ammunition_effects }
			}


			##### interface

			set_variable = { ammo_h = ammunition_variable }
			multiply_variable = { ammo_h = 1000 }

			set_variable = { ammo_daily_h = ammunition_daily }
			multiply_variable = { ammo_daily_h = 1000 }

			set_variable = { ammo_need_h = daily_ammo_need }
			multiply_variable = { ammo_need_h = 1000 }

			set_variable = { potential_need_h = potential_consumption_max }
			multiply_variable = { potential_need_h = 1000 }

			set_variable = { ammunition_max_h = ammunition_max }
			multiply_variable = { ammunition_max_h = 1000 }

			set_variable = { potential_consumption_h = potential_consumption_max }
			multiply_variable = { potential_consumption_h = 1000 }

			set_variable = { ammo_ratio_var = ammunition_variable }
			divide_variable = { ammo_ratio_var = ammunition_max }
			multiply_variable = { ammo_ratio_var = 100 }

			set_variable = { ammo_days_to_full = ammunition_max }
			subtract_from_variable = { ammo_days_to_full = ammunition_variable }
			divide_variable = { ammo_days_to_full = ammunition_balance }

			set_variable = { ammo_days_to_empty = ammunition_variable }
			divide_variable = { ammo_days_to_empty = ammunition_balance }
			multiply_variable = { ammo_days_to_empty = -1 }

			if = {
				limit = {
					check_variable = { ammunition_balance > 0 }
				}
				set_variable = { ammo_frame_var = 2 }
			}
			if = {
				limit = {
					check_variable = { ammunition_variable = ammunition_max }
				}
				set_variable = { ammo_frame_var = 1 }
			}
			if = {
				limit = {
					check_variable = { ammunition_balance < 0 }
				}
				set_variable = { ammo_frame_var = 3 }
			}

		}
	}

}